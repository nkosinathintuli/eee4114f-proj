[originalAudio, fs] = audioread('harvard.wav');

% Play the original audio
disp('Playing original audio...');
%sound(originalAudio, fs);
%pause(length(originalAudio)/fs + 1);

% Add white noise to the audio
noiseLevel = 0.05; 
noisyAudio = originalAudio + noiseLevel * randn(size(originalAudio));

% Play the noisy audio
disp('Playing noisy audio...');
%sound(noisyAudio, fs);
%pause(length(noisyAudio)/fs + 1);

% Define and apply a least-squares filter to remove the white noise
filterOrder = 100; % Adjust filter order as needed
b = firls(filterOrder, [0 0.3 0.4 1], [1 1 0 0],[1,1]); % Least-squares filter design
denoisedAudio = filter(b, 1, noisyAudio);

% Play the denoised audio
disp('Playing denoised audio...');
%sound(denoisedAudio, fs);
%pause(length(denoisedAudio)/fs + 1);

freqz(b,1)

% Plot the original, noisy, and denoised audio signals for comparison
t = (0:length(originalAudio)-1) / fs;
figure;
subplot(3,1,1);
plot(t, originalAudio);
title('Original Audio');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,2);
plot(t, noisyAudio);
title('Noisy Audio');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,3);
plot(t, denoisedAudio);
title('Denoised Audio');
xlabel('Time (s)');
ylabel('Amplitude');

% Compute and display SNR, PSNR, MSE values
mse_noisy = mean((originalAudio - noisyAudio).^2);
mse_filtered = mean((originalAudio - filteredAudio).^2);

peakSignal = max(abs(originalAudio));

snr_noisy = 10 * log10(sum(originalAudio.^2) / sum((originalAudio - noisyAudio).^2));
snr_filtered = 10 * log10(sum(originalAudio.^2) / sum((originalAudio - filteredAudio).^2));

psnr_noisy = 20 * log10(peakSignal / sqrt(mse_noisy));
psnr_filtered = 20 * log10(peakSignal / sqrt(mse_filtered));

fprintf('MSE (Noisy): %f\n', mse_noisy);
fprintf('MSE (Filtered): %f\n', mse_filtered);
fprintf('SNR (Noisy): %f dB\n', snr_noisy);
fprintf('SNR (Filtered): %f dB\n', snr_filtered);
fprintf('PSNR (Noisy): %f dB\n', psnr_noisy);
fprintf('PSNR (Filtered): %f dB\n', psnr_filtered);
