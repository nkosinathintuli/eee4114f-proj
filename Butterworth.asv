% Import a WAV file
[originalAudio, fs] = audioread('harvard.wav');

% Play the original audio
disp('Playing original audio...');
%sound(originalAudio, fs);
%pause(length(originalAudio)/fs + 1);

% Add white noise to the audio
noiseLevel = 0.05; % Adjust this value for different noise levels
noisyAudio = originalAudio + noiseLevel * randn(size(originalAudio));

% Play the noisy audio
disp('Playing noisy audio...');
%sound(noisyAudio, fs);
%pause(length(noisyAudio)/fs + 1);

% Design an IIR Butterworth filter to remove the white noise
filterOrder = 6; % Order of the Butterworth filter
cutoffFreq = 1600; % inspection of the audio 
cutoffFreqNorm = 0.4; % Normalized cutoff frequency (0 to 1, where 1 is Nyquist frequency)
[b, a] = butter(filterOrder, cutoffFreqNorm, 'low');


% Apply the Butterworth filter to the noisy audio
filteredAudio = filter(b, a, noisyAudio);

% Play the filtered audio
disp('Playing filtered (denoised) audio...');
%sound(filteredAudio, fs);
%pause(length(filteredAudio)/fs + 1);

% Plot the original, noisy, and filtered audio signals for comparison
t = (0:length(originalAudio)-1) / fs;
figure;
subplot(3,1,1);
plot(t, originalAudio);
title('Original Audio');
xlabel('Time (s)');
ylabel('Amplitude');

subplot(3,1,2);
plot(t, noisyAudio);
title('Noisy Audio');
xlabel('Time (s)');
ylabel('Amplitude');

freqz(b,1);

subplot(3,1,3);
plot(t, filteredAudio);
title('Filtered Audio');
xlabel('Time (s)');
ylabel('Amplitude');

% Compute and display SNR, PSNR, MSE values
mse_noisy = mean((originalAudio - noisyAudio).^2);
mse_filtered = mean((originalAudio - filteredAudio).^2);

peakSignal = max(abs(originalAudio));

snr_noisy = 10 * log10(sum(originalAudio.^2) / sum((originalAudio - noisyAudio).^2));
snr_filtered = 10 * log10(sum(originalAudio.^2) / sum((originalAudio - filteredAudio).^2));

psnr_noisy = 20 * log10(peakSignal / sqrt(mse_noisy));
psnr_filtered = 20 * log10(peakSignal / sqrt(mse_filtered));

fprintf('MSE (Noisy): %f\n', mse_noisy);
fprintf('MSE (Filtered): %f\n', mse_filtered);
fprintf('SNR (Noisy): %f dB\n', snr_noisy);
fprintf('SNR (Filtered): %f dB\n', snr_filtered);
fprintf('PSNR (Noisy): %f dB\n', psnr_noisy);
fprintf('PSNR (Filtered): %f dB\n', psnr_filtered);

% Compute and display SNR, PSNR, MSE values
mse_noisy = mean((originalAudio - noisyAudio).^2);
mse_filtered = mean((originalAudio - filteredAudio).^2);

peakSignal = max(abs(originalAudio));

snr_noisy = 10 * log10(sum(originalAudio.^2) / sum((originalAudio - noisyAudio).^2));
snr_filtered = 10 * log10(sum(originalAudio.^2) / sum((originalAudio - filteredAudio).^2));

psnr_noisy = 20 * log10(peakSignal / sqrt(mse_noisy));
psnr_filtered = 20 * log10(peakSignal / sqrt(mse_filtered));

fprintf('MSE (Noisy): %f\n', mse_noisy);
fprintf('MSE (Filtered): %f\n', mse_filtered);
fprintf('SNR (Noisy): %f dB\n', snr_noisy);
fprintf('SNR (Filtered): %f dB\n', snr_filtered);
fprintf('PSNR (Noisy): %f dB\n', psnr_noisy);
fprintf('PSNR (Filtered): %f dB\n', psnr_filtered);

